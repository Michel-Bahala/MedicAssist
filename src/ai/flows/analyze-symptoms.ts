// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Symptom analysis AI agent.
 *
 * - analyzeSymptoms - A function that handles the symptom analysis process.
 * - AnalyzeSymptomsInput - The input type for the analyzeSymptoms function.
 * - AnalyzeSymptomsOutput - The return type for the analyzeSymptoms function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeSymptomsInputSchema = z.object({
  symptoms: z
    .string()
    .describe(
      'A detailed description of the patientâ€™s symptoms, including onset, duration, severity, and any relevant medical history.'
    ),
  photoDataUri: z
    .string()
    .optional()
    .nullable()
    .describe(
      "An optional photo of a relevant medical image (e.g., rash, mole, injury), as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type AnalyzeSymptomsInput = z.infer<typeof AnalyzeSymptomsInputSchema>;

const PossibleConditionSchema = z.object({
  condition: z.string().describe('The name of the possible medical condition.'),
  confidenceScore: z
    .number()
    .describe(
      'A numerical value between 0 and 1 indicating the likelihood of the condition, where 0 is least likely and 1 is most likely.'
    ),
  explanation: z
    .string()
    .describe(
      'A brief explanation of why the condition is suspected based on the symptoms and/or image provided.'
    ),
});

const AnalyzeSymptomsOutputSchema = z.object({
  possibleConditions: z
    .array(PossibleConditionSchema)
    .describe(
      'A prioritized list of possible medical conditions based on the symptoms provided.'
    ),
  summary: z
    .string()
    .describe(
      'A summary of the analysis, including the most likely conditions and key symptoms/visuals leading to the diagnosis.'
    ),
  imageAnalysis: z.string().optional().describe('A detailed analysis of the provided image, if any.')
});
export type AnalyzeSymptomsOutput = z.infer<typeof AnalyzeSymptomsOutputSchema>;

export async function analyzeSymptoms(input: AnalyzeSymptomsInput): Promise<AnalyzeSymptomsOutput> {
  return analyzeSymptomsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeSymptomsPrompt',
  input: {schema: AnalyzeSymptomsInputSchema},
  output: {schema: AnalyzeSymptomsOutputSchema},
  prompt: `You are an AI-powered medical assistant specializing in symptom and medical image analysis.

  Given the following symptoms and optional medical image, provide a prioritized list of possible medical conditions with associated confidence scores and explanations. Also provide a summary of the analysis. If an image is provided, include a specific analysis of the image in the 'imageAnalysis' field.

  Symptoms: {{{symptoms}}}
  {{#if photoDataUri}}
  Medical Image: {{media url=photoDataUri}}
  {{/if}}

  Format the output as a JSON object. Be very cautious and always recommend consulting a doctor. Do not provide a definitive diagnosis.
  `,
});

const analyzeSymptomsFlow = ai.defineFlow(
  {
    name: 'analyzeSymptomsFlow',
    inputSchema: AnalyzeSymptomsInputSchema,
    outputSchema: AnalyzeSymptomsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
